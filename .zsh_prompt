#!/usr/bin/env bash

_cached_git_branch=""
COLOR_DEF='%f'
COLOR_USR='%F{208}'    # Orange
COLOR_DATE='%F{245}'   # Gray
COLOR_DIR='%F{81}'     # Cyan
COLOR_GIT='%F{220}'    # Yellow-Orange
COMPANY_REDHAT='rh' # redhat
# About the prefixed `$`: https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_03.html#:~:text=Words%20in%20the%20form%20%22%24',by%20the%20ANSI%2DC%20standard.
NEWLINE=$'\n'

parse_git_branch() {
	local s='';
	local empty=false
	local branchName='';

    # Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '')";

    # Early exit for Chromium & Blink repo, as the dirty check takes too long.
	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		s+='*';
	else
		# First, check if we're in a Git repository at all.
		if ! git rev-parse --is-inside-work-tree &> /dev/null; then
			empty=true;
		else
			# Check for uncommitted changes in the index.
			#if ! git diff --quiet --ignore-submodules --staged; then
	    	#	s+='+';
			#fi;
			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules &>/dev/null --); then
				s+='!';
			fi;
			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard &>/dev/null)" ]; then
				s+='?';
			fi;
			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;
		fi;
	fi;

	if [ "$empty" = "true" ]; then
		echo "" # Not a Git repo, so return an empty string.
	else
		[ -n "${s}" ] && s="[${s}]";

		echo -e "${1}${branchName}${2}${s}";
	fi;
}

# Set zsh option for prompt substitution
setopt PROMPT_SUBST
export PROMPT='┌─${COLOR_USR}${COMPANY_REDHAT}@%M${COLOR_DEF}(${COLOR_DATE}%D{%d/%m-%H:%M:%S}$(parse_git_branch "${COLOR_DEF}@${COLOR_GIT}")${COLOR_DEF}) ${COLOR_DIR}%~ ${COLOR_DEF}${NEWLINE}└─% '
# export PROMPT='${COLOR_USR}rh@%M › ${COLOR_DATE}[%D{%f/%m/%y}-%D{%L:%M:%S}] ${COLOR_DIR}%d ${COLOR_GIT}$(parse_git_branch)${COLOR_DEF}${NEWLINE}→ '

## Highlight the user name when logged in as root.
#if [[ "${USER}" == "root" ]]; then
#	userStyle="${red}";
#else
#	userStyle="${orange}";
#fi;
#
## Highlight the hostname when connected via SSH.
#if [[ "${SSH_TTY}" ]]; then
#	hostStyle="${bold}${red}";
#else
#	hostStyle="${yellow}";
#fi;
#
## Set the terminal title and prompt.
#PS1="\[\033]0;\W\007\]"; # working directory base name
#PS1+="\[${bold}\]\n"; # newline
#PS1+="\[${userStyle}\]\u"; # username
#PS1+="\[${white}\] at ";
#PS1+="\[${hostStyle}\]\h"; # host
#PS1+="\[${white}\] in ";
#PS1+="\[${green}\]\w"; # working directory full path
#PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")"; # Git repository details
#PS1+="\n";
#PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
#export PS1;
#
#PS2="\[${yellow}\]→ \[${reset}\]";
#export PS2;